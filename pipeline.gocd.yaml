pipelines:
  NewPipeline:
    group: myFirstpipeline
    materials:
      git:
        url: https://github.com/htetgit/Sample-repo.git
        branch: main
    stages:
      - name: Build
        jobs:
          - name: BuildAndTestJob
            tasks:
              - exec:
                  command: powershell
                  arguments:
                    - -Command
                    - |
                      # Stop any running instance of main.exe
                      Write-Output "Checking for running instances of main.exe"
                      $existingProcess = Get-Process | Where-Object { $_.Name -eq "main" }
                      if ($existingProcess) {
                          Write-Output "Stopping existing main.exe process"
                          Stop-Process -Name main -Force
                      } else {
                          Write-Output "No existing main.exe process found"
                      }

                      # Remove existing main.exe file if it exists
                      if (Test-Path -Path .\main.exe) {
                          Write-Output "Removing existing main.exe file"
                          Remove-Item -Path .\main.exe -Force
                      } else {
                          Write-Output "No existing main.exe file to remove"
                      }

                      # Initialize Go module
                      Write-Output "Initializing Go module"
                      go mod init hello-world-go
                      go get github.com/gorilla/mux
                      go mod tidy

                      # Build the Go application
                      Write-Output "Building the Go application"
                      go build -o main.exe .

                      # Start the Go application in the background on port 8082
                      Write-Output "Starting the Go application on port 8082"
                      $process = Start-Process -FilePath .\main.exe -ArgumentList "" -NoNewWindow -PassThru

                      # Wait for the server to start
                      Write-Output "Waiting for the server to start"
                      Start-Sleep -Seconds 5

                      # Check if the process is running
                      if ($process.HasExited) {
                        Write-Output "The Go application has stopped running. Check the logs for errors."
                        exit 1
                      }

                      # Check the application response
                      Write-Output "Checking the application response"
                      try {
                          $response = Invoke-WebRequest -Uri http://localhost:8082 -UseBasicParsing -TimeoutSec 10
                          if ($response.Content -eq "Hello, World!") {
                              Write-Output "Test Passed"
                          } else {
                              Write-Output "Test Failed: Expected 'Hello, World!' but received '$($response.Content)'"
                              exit 1
                          }
                      } catch {
                          Write-Output "Test Failed: Unable to connect to the Go application."
                          exit 1
                      }

                      # Stop the Go application
                      Write-Output "Stopping the Go application"
                      Stop-Process -Id $process.Id -Force
                      Write-Output "Go application stopped"
                  working_directory: src/hello-app
                  environment_variables:
                    GO111MODULE: "on"
