pipelines:
  NewPipeline:
    group: myFirstpipeline
    materials:
      git:
        url: https://github.com/htetgit/Sample-repo.git
        branch: main
    stages:
      - name: Build
        jobs:
          - name: BuildAndTestJob
            tasks:
              - exec:
                  command: powershell
                  arguments:
                    - -Command
                    - |
                      # Debug: Start of the script
                      Write-Output "Starting the build and test script"

                      # Initialize Go module
                      Write-Output "Initializing Go module"
                      go mod init hello-world-go
                      go get github.com/gorilla/mux
                      go mod tidy

                      # Build the application
                      Write-Output "Building the Go application"
                      go build -o main.exe .

                      # Start the Go application in the background on port 8081
                      Write-Output "Starting the Go application on port 8081"
                      $process = Start-Process -FilePath .\main.exe -ArgumentList "" -NoNewWindow -PassThru

                      # Wait for the server to start
                      Write-Output "Waiting for the server to start"
                      Start-Sleep -Seconds 5

                      # Check if the process is running
                      if ($process.HasExited) {
                        Write-Output "The Go application has stopped running. Check the logs for errors."
                        exit 1
                      }

                      # Check the application response
                      Write-Output "Checking the application response"
                      try {
                          $response = Invoke-WebRequest -Uri http://localhost:8081 -UseBasicParsing -TimeoutSec 10
                          if ($response.Content -eq "Hello, World!") {
                              Write-Output "Test Passed"
                          } else {
                              Write-Output "Test Failed: Expected 'Hello, World!' but received '$($response.Content)'"
                              exit 1
                          }
                      } catch {
                          Write-Output "Test Failed: Unable to connect to the Go application."
                          exit 1
                      }

                      # Stop the Go application with a timeout
                      Write-Output "Stopping the Go application"
                      $startTime = [System.Diagnostics.Stopwatch]::StartNew()
                      while ($process.HasExited -eq $false -and $startTime.Elapsed.TotalSeconds -lt 60) {
                          Start-Sleep -Seconds 1
                      }
                      if ($process.HasExited -eq $false) {
                          Stop-Process -Id $process.Id -Force
                      }
                      Write-Output "Go application stopped"
                  working_directory: src/hello-app
                  environment_variables:
                    GO111MODULE: "on